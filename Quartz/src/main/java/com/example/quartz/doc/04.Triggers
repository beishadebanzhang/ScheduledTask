Trigger的公共属性:
    TriggerKey： 表示trigger的身份
    jobKey属性：当trigger触发时被执行的job的身份
    startTime属性：
        设置trigger第一次触发的时间；该属性的值是java.util.Date类型，表示某个指定的时间点；
        有些类型的trigger，会在设置的startTime时立即触发，
        有些类型的trigger，表示其触发是在startTime之后开始生效
    endTime属性：表示trigger失效的时间点
    优先级(priority)
        如果你的trigger很多(或者Quartz线程池的工作线程太少)，Quartz可能没有足够的资源同时触发所有的trigger；
        这种情况下，你可能希望控制哪些trigger优先使用Quartz的工作线程，要达到该目的，可以在trigger上设置priority属性
        如果没有为trigger设置优先级，trigger使用默认优先级，值为5
        只有同时触发的trigger之间才会比较优先级。10:59触发的trigger总是在11:00触发的trigger之前执行
    错过触发(misfire Instructions)
        如果scheduler关闭了，或者Quartz线程池中没有可用的线程来执行job，此时持久性的trigger就会错过(miss)其触发时间，即错过触发(misfire)
        不同类型的trigger，有不同的misfire机制。它们默认都使用“智能机制(smart policy)”
            --> 即根据trigger的类型和配置动态调整行为
        当scheduler启动的时候，查询所有错过触发(misfire)的持久性trigger, 然后根据它们各自的misfire机制更新trigger的信息
    日历示例(calendar):
        Quartz的Calendar对象(不是java.util.Calendar对象)可以在定义和存储trigger的时候与trigger进行关联
        Calendar用于从trigger的调度计划中排除时间段
        interface Calendar:
            boolean isTimeIncluded(long timeStamp);
            long getNextIncludedTime(long timeStamp);
        Trigger t2 = newTrigger()
            .withIdentity("myTrigger2")
            .forJob("myJob2")
            .withSchedule(dailyAtHourAndMinute(11, 30)) // execute job daily at 11:30
            .modifiedByCalendar("myHolidays") // but not on holidays
            .build();

